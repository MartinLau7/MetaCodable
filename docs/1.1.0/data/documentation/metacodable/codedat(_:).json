{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"seeAlsoSections":[{"title":"Strategies","generated":true,"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"path","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path value located at.","type":"text"}]}],"name":"path"}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If single argument provided for "},{"type":"codeVoice","code":"path"},{"type":"text","text":", then that argument is"},{"type":"text","text":" "},{"type":"text","text":"chosen as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":". i.e for JSON:"}]},{"type":"codeListing","code":["{ \"key\": \"value\" }"],"syntax":"json"},{"type":"paragraph","inlineContent":[{"type":"text","text":"the field can declare custom key:"}]},{"type":"codeListing","code":["@CodedAt(\"key\")","let field: String"],"syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple arguments provided, then field is decoded\/encoded"},{"type":"text","text":" "},{"type":"text","text":"nested by all the arguments as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":". i.e for JSON:"}],"type":"paragraph"},{"syntax":"json","type":"codeListing","code":["{ \"deeply\": { \"nested\": { \"key\": \"value\" } } }"]},{"inlineContent":[{"text":"the field can declare custom key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@CodedAt(\"deeply\", \"nested\", \"key\")","let field: String"]}]},{"content":[{"inlineContent":[{"text":"If no arguments provided, then field needs to be directly decoded from","type":"text"},{"text":" ","type":"text"},{"text":"and encoded to parent ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively rather","type":"text"},{"text":" ","type":"text"},{"text":"than at a ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" instance in parent type ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" implementation’s","type":"text"},{"text":" ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" instance in parent type ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"implementation’s ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method is directly passed to field type’s","type":"text"},{"text":" ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method respectively.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Using this some core ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types can be reused across multiple","type":"text"},{"text":" ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. i.e. for different vehicle types in JSON:","type":"text"}],"type":"paragraph"},{"syntax":"json","code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"core "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" model with common properties can be used with"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" models:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodedAt","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodedAt","    let base: Vehicle","    let start: String","    let destination: String","}"],"type":"codeListing"}]}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"type":"text","text":" "},{"type":"text","text":"is a variable declaration. "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"type":"text","text":" macro uses this macro"},{"type":"text","text":" "},{"type":"text","text":"when generating final implementations."}],"type":"paragraph"}]},{"type":"aside","style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The field type must confirm to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]}]}]}],"sections":[],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","interfaceLanguage":"swift"},"metadata":{"symbolKind":"macro","modules":[{"name":"MetaCodable"}],"platforms":[{"name":"Swift","beta":false,"deprecated":false,"unavailable":false,"introducedAt":"5.9"}],"title":"CodedAt(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"externalID":"s:11MetaCodable7CodedAtyys12StaticStringVd_tcfm","roleHeading":"Macro"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codedat(_:)"]}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable","title":"MetaCodable","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","title":"CodingKeys(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field needs to ignored from encoding.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties for the attached type will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ignored for decoding\/encoding."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"IgnoreCodingInitialized()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"text":"attributes provided on variable declarations.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","title":"Codable()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by"},{"type":"text","text":" "},{"type":"text","text":"the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedby(_:)","title":"CodedBy(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()","role":"symbol"}}}