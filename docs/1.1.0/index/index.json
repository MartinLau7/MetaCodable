{"interfaceLanguages":{"swift":[{"children":[{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codable()","title":"macro Codable()","type":"macro"},{"path":"\/documentation\/metacodable\/memberinit()","title":"macro MemberInit()","type":"macro"},{"title":"Strategies","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codedat(_:)","title":"macro CodedAt(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/codedin(_:)","title":"macro CodedIn(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/default(_:)","title":"macro Default<T>(T)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:)","title":"macro CodedBy<T>(T)","type":"macro"},{"path":"\/documentation\/metacodable\/ignorecoding()","title":"macro IgnoreCoding()","type":"macro"},{"path":"\/documentation\/metacodable\/ignoredecoding()","title":"macro IgnoreDecoding()","type":"macro"},{"path":"\/documentation\/metacodable\/ignoreencoding()","title":"macro IgnoreEncoding()","type":"macro"},{"path":"\/documentation\/metacodable\/codingkeys(_:)","title":"macro CodingKeys(CodingKeyNameStrategy)","type":"macro"},{"path":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"macro IgnoreCodingInitialized()","type":"macro"},{"title":"Helpers","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/metacodable\/helpercoder\/coded","title":"Coded","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/helpercoder\/decode(from:)","title":"func decode(from: Decoder) throws -> Self.Coded","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decode(from:forkey:)-5o9sv","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decode(from:forkey:)-8cbjf","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:)-6b3ri","title":"func decodeIfPresent(from: Decoder) throws -> Self.Coded?","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:)-826qw","title":"func decodeIfPresent(from: Decoder) throws -> Self.Coded?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:forkey:)-52cqt","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:forkey:)-4hf2h","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-ag7u","title":"func encode(Self.Coded, to: Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-25yjk","title":"func encode(Self.Coded, to: Encoder) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","title":"func encode(Self.Coded, to: Encoder) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:atkey:)-70vkr","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:atkey:)-4jn4c","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:)-85bec","title":"func encodeIfPresent(Self.Coded?, to: Encoder) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:)-2u9fb","title":"func encodeIfPresent(Self.Coded?, to: Encoder) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:atkey:)-91902","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:atkey:)-50iok","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"path":"\/documentation\/metacodable\/helpercoder","title":"HelperCoder","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/init(default:)","title":"init(default: S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decode(from:)","title":"func decode(from: Decoder) throws -> S","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decode(from:forkey:)","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decodeifpresent(from:)","title":"func decodeIfPresent(from: Decoder) throws -> Self.Coded?","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decodeifpresent(from:forkey:)","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encode(_:to:)","title":"func encode(Self.Coded, to: Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encode(_:to:atkey:)","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encodeifpresent(_:to:)","title":"func encodeIfPresent(Self.Coded?, to: Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encodeifpresent(_:to:atkey:)","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"path":"\/documentation\/metacodable\/lossysequencecoder\/helpercoder-implementations","title":"HelperCoder Implementations","type":"symbol"}],"path":"\/documentation\/metacodable\/lossysequencecoder","title":"LossySequenceCoder","type":"struct"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/sequenceinitializable\/init(_:)","title":"init<S>(S)","type":"init"}],"path":"\/documentation\/metacodable\/sequenceinitializable","title":"SequenceInitializable","type":"protocol"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/pascalcase","title":"case PascalCase","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/screaming_kebab_case","title":"case SCREAMING－KEBAB－CASE","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/screaming_snake_case","title":"case SCREAMING_SNAKE_CASE","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/train_case","title":"case Train－Case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/camelcase","title":"case camelCase","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/camel_snake_case","title":"case camel_Snake_Case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/kebab_case","title":"case kebab－case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/snake_case","title":"case snake_case","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/metacodable\/codingkeynamestrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/metacodable\/codingkeynamestrategy","title":"CodingKeyNameStrategy","type":"enum"}],"path":"\/documentation\/metacodable","title":"MetaCodable","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}