{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},"metadata":{"platforms":[{"introducedAt":"5.9","deprecated":false,"unavailable":false,"name":"Swift","beta":false}],"role":"symbol","symbolKind":"macro","externalID":"s:11MetaCodable7CodedAtyys12StaticStringVd_tcfm","modules":[{"name":"MetaCodable"}],"title":"CodedAt(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"roleHeading":"Macro"},"seeAlsoSections":[{"title":"Strategies","generated":true,"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codedat(_:)"]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"path"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"path","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path value located at."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If single argument provided for "},{"code":"path","type":"codeVoice"},{"type":"text","text":", then that argument is"},{"type":"text","text":" "},{"type":"text","text":"chosen as "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":". i.e for JSON:"}]},{"code":["{ \"key\": \"value\" }"],"type":"codeListing","syntax":"json"},{"type":"paragraph","inlineContent":[{"type":"text","text":"the field can declare custom key:"}]},{"code":["@CodedAt(\"key\")","let field: String"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple arguments provided, then field is decoded\/encoded"},{"type":"text","text":" "},{"type":"text","text":"nested by all the arguments as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":". i.e for JSON:"}],"type":"paragraph"},{"syntax":"json","code":["{ \"deeply\": { \"nested\": { \"key\": \"value\" } } }"],"type":"codeListing"},{"inlineContent":[{"text":"the field can declare custom key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@CodedAt(\"deeply\", \"nested\", \"key\")","let field: String"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"If no arguments provided, then field needs to be directly decoded from","type":"text"},{"text":" ","type":"text"},{"text":"and encoded to parent ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively rather","type":"text"},{"text":" ","type":"text"},{"text":"than at a ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" instance in parent type ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" implementation’s","type":"text"},{"text":" ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" instance in parent type ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"implementation’s ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method is directly passed to field type’s","type":"text"},{"text":" ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method respectively.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Using this some core "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types can be reused across multiple"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations. i.e. for different vehicle types in JSON:"}],"type":"paragraph"},{"type":"codeListing","syntax":"json","code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"]},{"inlineContent":[{"text":"core ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" model with common properties can be used with","type":"text"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" models:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodedAt","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodedAt","    let base: Vehicle","    let start: String","    let destination: String","}"]}]}],"type":"unorderedList"},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"This macro on its own only validates if attached declaration","type":"text"},{"text":" ","type":"text"},{"text":"is a variable declaration. ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" macro uses this macro","type":"text"},{"text":" ","type":"text"},{"text":"when generating final implementations.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The field type must confirm to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"Important"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","title":"CodingKeys(_:)","type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"title":"IgnoreDecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" types by leveraging custom","type":"text"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"title":"IgnoreCodingInitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"text":"Indicates by default initialized properties for the attached type will be","type":"text"},{"text":" ","type":"text"},{"text":"ignored for decoding\/encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"title":"IgnoreCoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"text":" ","type":"text"},{"text":"the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"text":"Indicates the field needs to ignored from encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable":{"kind":"symbol","url":"\/documentation\/metacodable","title":"MetaCodable","type":"topic","role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"title":"Default(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}]}}}