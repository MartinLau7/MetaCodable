{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codedat(_:)"]}],"metadata":{"modules":[{"name":"MetaCodable"}],"roleHeading":"Macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"role":"symbol","platforms":[{"beta":false,"deprecated":false,"name":"Swift","introducedAt":"5.9","unavailable":false}],"externalID":"s:11MetaCodable7CodedAtyys12StaticStringVd_tcfm","title":"CodedAt(_:)","symbolKind":"macro"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Strategies"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"path","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path value located at."}]}],"name":"path"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"items":[{"content":[{"inlineContent":[{"text":"If single argument provided for ","type":"text"},{"type":"codeVoice","code":"path"},{"text":", then that argument is","type":"text"},{"text":" ","type":"text"},{"text":"chosen as ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":". i.e for JSON:","type":"text"}],"type":"paragraph"},{"code":["{ \"key\": \"value\" }"],"syntax":"json","type":"codeListing"},{"inlineContent":[{"type":"text","text":"the field can declare custom key:"}],"type":"paragraph"},{"code":["@CodedAt(\"key\")","let field: String"],"syntax":"swift","type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple arguments provided, then field is decoded\/encoded"},{"type":"text","text":" "},{"type":"text","text":"nested by all the arguments as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":". i.e for JSON:"}],"type":"paragraph"},{"code":["{ \"deeply\": { \"nested\": { \"key\": \"value\" } } }"],"type":"codeListing","syntax":"json"},{"inlineContent":[{"type":"text","text":"the field can declare custom key:"}],"type":"paragraph"},{"code":["@CodedAt(\"deeply\", \"nested\", \"key\")","let field: String"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If no arguments provided, then field needs to be directly decoded from","type":"text"},{"text":" ","type":"text"},{"text":"and encoded to parent ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" respectively rather","type":"text"},{"text":" ","type":"text"},{"text":"than at a ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" implementation’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" "},{"type":"text","text":"implementation’s "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method is directly passed to field type’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method respectively."}]},{"type":"paragraph","inlineContent":[{"text":"Using this some core ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types can be reused across multiple","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations. i.e. for different vehicle types in JSON:","type":"text"}]},{"code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"],"syntax":"json","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"core ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" model with common properties can be used with","type":"text"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" models:","type":"text"}]},{"code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodedAt","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodedAt","    let base: Vehicle","    let start: String","    let destination: String","}"],"syntax":"swift","type":"codeListing"}]}],"type":"unorderedList"},{"name":"Note","content":[{"inlineContent":[{"text":"This macro on its own only validates if attached declaration","type":"text"},{"text":" ","type":"text"},{"text":"is a variable declaration. ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" macro uses this macro","type":"text"},{"text":" ","type":"text"},{"text":"when generating final implementations.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"name":"Important","content":[{"inlineContent":[{"text":"The field type must confirm to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"important"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding."}],"url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"kind":"symbol","title":"CodedAt(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding and encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"CodedBy(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by"},{"type":"text","text":" "},{"type":"text","text":"the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","kind":"symbol","title":"MetaCodable","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"kind":"symbol","title":"Codable()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"text":"attributes provided on variable declarations.","type":"text"}],"url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}],"title":"IgnoreCodingInitialized()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"kind":"symbol","title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"kind":"symbol","title":"CodedIn(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"Default(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"url":"\/documentation\/metacodable\/default(_:)"}}}