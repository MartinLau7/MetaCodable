{"metadata":{"platforms":[{"name":"Swift","introducedAt":"5.9","unavailable":false,"deprecated":false,"beta":false}],"externalID":"s:11MetaCodable7CodedAtyys12StaticStringVd_tcfm","roleHeading":"Macro","symbolKind":"macro","modules":[{"name":"MetaCodable"}],"title":"CodedAt(_:)","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path value located at."}],"type":"paragraph"}],"name":"path"}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"If single argument provided for "},{"type":"codeVoice","code":"path"},{"type":"text","text":", then that argument is"},{"type":"text","text":" "},{"type":"text","text":"chosen as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":". i.e for JSON:"}],"type":"paragraph"},{"syntax":"json","code":["{ \"key\": \"value\" }"],"type":"codeListing"},{"inlineContent":[{"text":"the field can declare custom key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@CodedAt(\"key\")","let field: String"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"If multiple arguments provided, then field is decoded\/encoded","type":"text"},{"text":" ","type":"text"},{"text":"nested by all the arguments as ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":". i.e for JSON:","type":"text"}],"type":"paragraph"},{"syntax":"json","code":["{ \"deeply\": { \"nested\": { \"key\": \"value\" } } }"],"type":"codeListing"},{"inlineContent":[{"text":"the field can declare custom key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@CodedAt(\"deeply\", \"nested\", \"key\")","let field: String"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no arguments provided, then field needs to be directly decoded from"},{"type":"text","text":" "},{"type":"text","text":"and encoded to parent "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively rather"},{"type":"text","text":" "},{"type":"text","text":"than at a "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" instance in parent type ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" implementation’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"init(from:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" instance in parent type ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" ","type":"text"},{"text":"implementation’s ","type":"text"},{"type":"codeVoice","code":"encode(to:)"},{"text":" method is directly passed to field type’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"init(from:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encode(to:)"},{"text":" method respectively.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this some core "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types can be reused across multiple"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations. i.e. for different vehicle types in JSON:"}]},{"type":"codeListing","code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"],"syntax":"json"},{"type":"paragraph","inlineContent":[{"text":"core ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" model with common properties can be used with","type":"text"},{"text":" ","type":"text"},{"text":"specialized ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" models:","type":"text"}]},{"type":"codeListing","code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodedAt","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodedAt","    let base: Vehicle","    let start: String","    let destination: String","}"],"syntax":"swift"}]}],"type":"unorderedList"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"type":"text","text":" "},{"type":"text","text":"is a variable declaration. "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"type":"text","text":" macro uses this macro"},{"type":"text","text":" "},{"type":"text","text":"when generating final implementations."}],"type":"paragraph"}],"type":"aside","style":"note"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The field type must confirm to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside","style":"important"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codedat(_:)"]}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"role":"symbol","type":"topic","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","kind":"symbol","type":"topic","title":"IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedin(_:)","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"title":"Codable()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","type":"topic","title":"Default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/default(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"url":"\/documentation\/metacodable","kind":"symbol","type":"topic","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"text":" ","type":"text"},{"text":"the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"type":"text","text":" instance."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","type":"topic","title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","title":"IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()"}}}