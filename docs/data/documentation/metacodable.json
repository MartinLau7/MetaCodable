{"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"metadata":{"externalID":"MetaCodable","role":"collection","modules":[{"name":"MetaCodable"}],"title":"MetaCodable","platforms":[{"introducedAt":"5.9","name":"Swift"}],"roleHeading":"Framework","symbolKind":"module"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable"]}],"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Strategies"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"],"title":"Helpers"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"],"title":"Protocols"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"],"title":"Enumerations"}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. The core of the framework is ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" macro which generates the implementation aided by data provided with using other macros.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" aims to supercharge your ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations by providing these inbox features:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Allows custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" value declaration per variable, instead of requiring you to write all the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" passing single argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" passing no arguments."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to provide default value in case of decoding failures with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" and using them with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":". i.e. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true},{"type":"text","text":" etc."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to ignore specific properties from decoding\/encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to use camel-case names for variables according to ","type":"text"},{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true,"type":"reference"},{"text":", while enabling a type to work with different case style keys with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore all initialized properties of a type from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference"},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference"},{"text":" etc.","type":"text"}]}]}]},{"text":"Installation","type":"heading","level":2,"anchor":"Installation"},{"type":"tabNavigator","tabs":[{"title":"Swift Package Manager","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"https:\/\/swift.org\/package-manager\/","type":"reference","isActive":true},{"text":" is a tool for automating the distribution of Swift code and is integrated into the ","type":"text"},{"code":"swift","type":"codeVoice"},{"text":" compiler.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}]},{"type":"codeListing","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can add the "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" module product as dependency to the "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s of your choosing, by adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s."}]},{"type":"codeListing","code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift"}]}]}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"required":true,"title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"url":"\/documentation\/metacodable\/helpercoder\/coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},"https://swift.org/package-manager/":{"titleInlineContent":[{"text":"Swift Package Manager","type":"text"}],"title":"Swift Package Manager","type":"link","url":"https:\/\/swift.org\/package-manager\/","identifier":"https:\/\/swift.org\/package-manager\/"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"title":"CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"title":"Swift API Design Guidelines","type":"link","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","abstract":[{"type":"text","text":"Generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"title":"IgnoreEncoding()","abstract":[{"text":"Indicates the field needs to ignored from encoding.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/ignoreencoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"title":"SequenceInitializable","abstract":[{"type":"text","text":"A sequence type that can be initialized from another sequence."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitializable"}],"url":"\/documentation\/metacodable\/sequenceinitializable","navigatorTitle":[{"kind":"identifier","text":"SequenceInitializable"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"title":"IgnoreDecoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"title":"LossySequenceCoder","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LossySequenceCoder"}],"url":"\/documentation\/metacodable\/lossysequencecoder","navigatorTitle":[{"kind":"identifier","text":"LossySequenceCoder"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","url":"\/documentation\/metacodable","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"title":"MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"title":"IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties for the attached type will be","type":"text"},{"text":" ","type":"text"},{"text":"ignored for decoding\/encoding.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)","title":"CodedBy(_:)","kind":"symbol","abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"type":"text","text":" "},{"text":"the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder","title":"HelperCoder","kind":"symbol","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()","kind":"symbol","abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)","kind":"symbol","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","url":"\/documentation\/metacodable\/memberinit()","title":"MemberInit()","kind":"symbol","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" types by leveraging custom","type":"text"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"url":"\/documentation\/metacodable\/codingkeynamestrategy","abstract":[{"type":"text","text":"The values that determine the equivalent"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"title":"CodingKeyNameStrategy"}}}