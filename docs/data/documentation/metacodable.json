{"sections":[],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" framework exposes custom macros which can be used to generate dynamic "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations. The core of the framework is "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"type":"text","text":" macro which generates the implementation aided by data provided with using other macros."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Allows custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value declaration per variable, instead of requiring you to write all the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" passing single argument."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create composition of multiple ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" passing no arguments.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to provide default value in case of decoding failures with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" and using them with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":". i.e. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true},{"type":"text","text":" etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to ignore specific properties from decoding\/encoding with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"type":"reference","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true},{"type":"text","text":", while enabling a type to work with different case style keys with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to ignore all initialized properties of a type from decoding\/encoding with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"text":" etc.","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","text":"Installation","anchor":"Installation","level":2},{"type":"tabNavigator","tabs":[{"title":"Swift Package Manager","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"type":"codeVoice","code":"swift"},{"type":"text","text":" compiler."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}],"type":"paragraph"},{"code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then you can add the ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" module product as dependency to the ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s of your choosing, by adding it to the ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" value of your ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s.","type":"text"}],"type":"paragraph"},{"code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift","type":"codeListing"}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/metacodable"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"topicSections":[{"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]},{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"]},{"title":"Protocols","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"]},{"title":"Enumerations","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"hierarchy":{"paths":[[]]},"kind":"symbol","metadata":{"modules":[{"name":"MetaCodable"}],"role":"collection","platforms":[{"name":"Swift","introducedAt":"5.9"}],"title":"MetaCodable","roleHeading":"Framework","symbolKind":"module","externalID":"MetaCodable"},"references":{"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable","kind":"symbol","url":"\/documentation\/metacodable\/sequenceinitializable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SequenceInitializable","kind":"identifier"}],"navigatorTitle":[{"text":"SequenceInitializable","kind":"identifier"}],"type":"topic","title":"SequenceInitializable","role":"symbol","abstract":[{"type":"text","text":"A sequence type that can be initialized from another sequence."}]},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"type":"link","titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","title":"Swift API Design Guidelines"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"required":true,"title":"Coded","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"kind":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"title":"HelperCoder","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"url":"\/documentation\/metacodable\/helpercoder","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},"https://swift.org/package-manager/":{"type":"link","titleInlineContent":[{"type":"text","text":"Swift Package Manager"}],"url":"https:\/\/swift.org\/package-manager\/","identifier":"https:\/\/swift.org\/package-manager\/","title":"Swift Package Manager"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"Default(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"url":"\/documentation\/metacodable\/default(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"kind":"symbol","title":"Codable()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"text":"attributes provided on variable declarations.","type":"text"}],"url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","url":"\/documentation\/metacodable\/memberinit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"kind":"symbol","title":"MemberInit()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","role":"symbol","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"title":"CodingKeyNameStrategy","abstract":[{"type":"text","text":"The values that determine the equivalent"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/codingkeynamestrategy","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"kind":"symbol","title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding."}],"url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"CodedBy(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by"},{"type":"text","text":" "},{"type":"text","text":"the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}],"title":"IgnoreCodingInitialized()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"kind":"symbol","title":"CodedIn(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","kind":"symbol","title":"MetaCodable","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding and encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","abstract":[{"type":"text","text":"An "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LossySequenceCoder"}],"url":"\/documentation\/metacodable\/lossysequencecoder","navigatorTitle":[{"kind":"identifier","text":"LossySequenceCoder"}],"kind":"symbol","title":"LossySequenceCoder"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"kind":"symbol","title":"CodedAt(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"url":"\/documentation\/metacodable\/codedat(_:)"}}}