{"topicSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Strategies"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"],"title":"Helpers"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"],"title":"Protocols"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"],"title":"Enumerations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable"]}],"abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"kind":"symbol","metadata":{"platforms":[{"name":"Swift","introducedAt":"5.9"}],"role":"collection","title":"MetaCodable","modules":[{"name":"MetaCodable"}],"roleHeading":"Framework","externalID":"MetaCodable","symbolKind":"module"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations. The core of the framework is ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" macro which generates the implementation aided by data provided with using other macros.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" value declaration per variable, instead of requiring you to write all the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" passing single argument.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create flattened model for nested ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" values with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" passing no arguments."}]}]},{"content":[{"inlineContent":[{"text":"Allows to provide default value in case of decoding failures with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" and using them with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":". i.e. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true},{"type":"text","text":" etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore specific properties from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to use camel-case names for variables according to ","type":"text"},{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true,"type":"reference"},{"text":", while enabling a type to work with different case style keys with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore all initialized properties of a type from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference","isActive":true},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" etc.","type":"text"}]}]}]},{"type":"heading","anchor":"Installation","level":2,"text":"Installation"},{"type":"tabNavigator","tabs":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"code":"swift","type":"codeVoice"},{"type":"text","text":" compiler."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"code":"dependencies","type":"codeVoice"},{"type":"text","text":" value of your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then you can add the ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" module product as dependency to the ","type":"text"},{"type":"codeVoice","code":"target"},{"text":"s of your choosing, by adding it to the ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"text":" value of your ","type":"text"},{"type":"codeVoice","code":"target"},{"text":"s.","type":"text"}],"type":"paragraph"},{"code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift","type":"codeListing"}],"title":"Swift Package Manager"}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable","interfaceLanguage":"swift"},"references":{"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}],"title":"HelperCoder","navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"url":"\/documentation\/metacodable\/helpercoder","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"title":"Codable()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/coded","required":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","kind":"symbol","type":"topic","title":"IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()"},"https://swift.org/package-manager/":{"titleInlineContent":[{"type":"text","text":"Swift Package Manager"}],"type":"link","url":"https:\/\/swift.org\/package-manager\/","title":"Swift Package Manager","identifier":"https:\/\/swift.org\/package-manager\/"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"text":" ","type":"text"},{"text":"the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"type":"text","text":" instance."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","type":"topic","title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"type":"topic","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/memberinit()","title":"MemberInit()","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","kind":"symbol","abstract":[{"type":"text","text":"The values that determine the equivalent"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"url":"\/documentation\/metacodable\/codingkeynamestrategy","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"title":"CodingKeyNameStrategy"},"doc://MetaCodable/documentation/MetaCodable":{"title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"url":"\/documentation\/metacodable","kind":"symbol","type":"topic","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","title":"IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedin(_:)","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","type":"topic","title":"Default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"role":"symbol","type":"topic","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"abstract":[{"text":"A sequence type that can be initialized from another sequence.","type":"text"}],"title":"SequenceInitializable","navigatorTitle":[{"text":"SequenceInitializable","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SequenceInitializable","kind":"identifier"}],"url":"\/documentation\/metacodable\/sequenceinitializable","type":"topic","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"title":"LossySequenceCoder","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","abstract":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"url":"\/documentation\/metacodable\/lossysequencecoder","navigatorTitle":[{"kind":"identifier","text":"LossySequenceCoder"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LossySequenceCoder"}],"type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}]},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"title":"Swift API Design Guidelines","type":"link"}}}