{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableCompose"},{"kind":"text","text":"() -> ()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" implementation’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" "},{"type":"text","text":"implementation’s "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method is directly passed to field type’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this some core "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types can be reused across multiple"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations. i.e. for different vehicle types in JSON:"}]},{"type":"codeListing","syntax":"json","code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"core "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" model with common properties can be used with"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" models:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodableCompose","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodableCompose","    let base: Vehicle","    let start: String","    let destination: String","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this macro to replace "},{"type":"codeVoice","code":"class"},{"type":"text","text":"es and inheritance pattern"},{"type":"text","text":" "},{"type":"text","text":"for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation, with composition of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"s."}]}],"type":"aside","name":"Tip"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"type":"text","text":" "},{"type":"text","text":"is a variable declaration. "},{"type":"codeVoice","code":"Codable()"},{"type":"text","text":" macro uses this"},{"type":"text","text":" "},{"type":"text","text":"macro when generating final implementations."}]}],"type":"aside","name":"Note"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The field type must confirm to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]}],"type":"aside","name":"Important"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/metacodable\/codablecompose"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodableCompose","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Indicates the field needs to be directly decoded from and encoded to"},{"type":"text","text":" "},{"type":"text","text":"parent "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively rather than at a"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableCompose"},{"kind":"text","text":"() -> ()"}],"title":"CodableCompose","roleHeading":"Macro","role":"symbol","symbolKind":"macro","externalID":"s:11MetaCodable0B7Composeyycfm","modules":[{"name":"MetaCodable"}]},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"references":{"doc://MetaCodable/documentation/MetaCodable/CodableCompose":{"role":"symbol","title":"CodableCompose","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableCompose"},{"kind":"text","text":"() -> ()"}],"abstract":[{"type":"text","text":"Indicates the field needs to be directly decoded from and encoded to"},{"type":"text","text":" "},{"type":"text","text":"parent "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively rather than at a"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodableCompose","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codablecompose"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","title":"MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","type":"topic","url":"\/documentation\/metacodable"}}}