{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"strategy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"strategy","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},{"type":"text","text":" recommend using camel-case names."},{"type":"text","text":" "},{"type":"text","text":"This macro can be used for types to work with "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s of different"},{"type":"text","text":" "},{"type":"text","text":"case format while keeping variable names camel-cased."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a JSON where keys follow snake-case style:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"product_name\": \"Banana\",","  \"product_cost\": 200,","  \"description\": \"A banana grown in Ecuador.\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type can be created that uses keys in camel-case"},{"type":"text","text":" "},{"type":"text","text":"style:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","@CodingKeys(.snake_case)","struct CodableType {","    let productName: String","    let productCost: String","    let description: String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro generated code will transform field names"},{"type":"text","text":" "},{"type":"text","text":"to snake-case in the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy is only used to transform field names to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s. "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s provided with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" will remain unchanged."}]}],"type":"aside","name":"Note"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"type":"text","text":" "},{"type":"text","text":"is a variable declaration. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro uses this macro"},{"type":"text","text":" "},{"type":"text","text":"when generating final implementations."}]}],"type":"aside","name":"Note"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute must be used combined with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":"."}]}],"type":"aside","name":"Important"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/metacodable\/codingkeys(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"kind":"symbol","metadata":{"role":"symbol","title":"CodingKeys(_:)","roleHeading":"Macro","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"symbolKind":"macro","externalID":"s:11MetaCodable10CodingKeysyyAA0C15KeyNameStrategyOcfm","modules":[{"name":"MetaCodable"}],"platforms":[{"beta":false,"unavailable":false,"name":"Swift","introducedAt":"5.9","deprecated":false}]},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"generated":true}],"references":{"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","title":"Default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/default(_:)"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"title":"Swift API Design Guidelines","titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"type":"link","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","title":"IgnoreDecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","title":"CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","title":"CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names will be of the provided"},{"type":"text","text":" "},{"type":"text","text":"case format."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"role":"symbol","title":"CodingKeyNameStrategy","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeyNameStrategy"}],"abstract":[{"type":"text","text":"The values that determine the equivalent"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodingKeyNameStrategy"}],"url":"\/documentation\/metacodable\/codingkeynamestrategy"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by"},{"type":"text","text":" "},{"type":"text","text":"the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","title":"MetaCodable","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","type":"topic","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"role":"symbol","title":"CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","title":"IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding and encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"role":"symbol","title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","title":"IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()"}}}