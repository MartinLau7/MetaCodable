{"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations. The core of the framework is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro which generates the implementation aided by data provided with using other macros."}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Allows custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value declaration per variable, instead of requiring you to write all the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" passing single argument."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to create flattened model for nested ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" passing no arguments."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to provide default value in case of decoding failures with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create custom decoding\/encoding strategies with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" and using them with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"text":". i.e. ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"},{"text":" etc.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore specific properties from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"reference"},{"type":"text","text":", while enabling a type to work with different case style keys with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Allows to ignore all initialized properties of a type from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference","isActive":true},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" etc.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Installation","type":"heading","level":2,"text":"Installation"},{"type":"tabNavigator","tabs":[{"title":"Swift Package Manager","content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/swift.org\/package-manager\/"},{"text":" is a tool for automating the distribution of Swift code and is integrated into the ","type":"text"},{"code":"swift","type":"codeVoice"},{"text":" compiler.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}],"type":"paragraph"},{"code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you can add the "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" module product as dependency to the "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s of your choosing, by adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s."}],"type":"paragraph"},{"code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift","type":"codeListing"}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable"]}],"metadata":{"externalID":"MetaCodable","title":"MetaCodable","modules":[{"name":"MetaCodable"}],"symbolKind":"module","platforms":[{"introducedAt":"5.9","name":"Swift"}],"roleHeading":"Framework","role":"collection"},"sections":[],"topicSections":[{"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]},{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"]},{"title":"Protocols","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"]},{"title":"Enumerations","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","url":"\/documentation\/metacodable\/codingkeynamestrategy","type":"topic","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"kind":"symbol","title":"CodingKeyNameStrategy","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value for a property name.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SequenceInitializable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitializable"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable","title":"SequenceInitializable","url":"\/documentation\/metacodable\/sequenceinitializable","type":"topic","abstract":[{"type":"text","text":"A sequence type that can be initialized from another sequence."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()","abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"title":"IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by"},{"type":"text","text":" "},{"text":"the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"title":"IgnoreCoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"url":"\/documentation\/metacodable\/codedat(_:)","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" types by leveraging custom"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/codable()"},"https://swift.org/package-manager/":{"titleInlineContent":[{"type":"text","text":"Swift Package Manager"}],"identifier":"https:\/\/swift.org\/package-manager\/","title":"Swift Package Manager","url":"https:\/\/swift.org\/package-manager\/","type":"link"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"type":"topic","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","role":"symbol","url":"\/documentation\/metacodable\/helpercoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"title":"HelperCoder"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","url":"\/documentation\/metacodable\/codedin(_:)","type":"topic","title":"CodedIn(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","title":"MemberInit()","url":"\/documentation\/metacodable\/memberinit()","type":"topic","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}],"title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","url":"\/documentation\/metacodable","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"title":"MetaCodable","role":"collection","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","title":"Default(_:)","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"type":"topic","title":"LossySequenceCoder","abstract":[{"text":"An ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" that helps decoding\/encoding lossy sequence.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LossySequenceCoder","kind":"identifier"}],"url":"\/documentation\/metacodable\/lossysequencecoder","navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"type":"topic","required":true,"url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","role":"symbol","title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names will be of the provided"},{"text":" ","type":"text"},{"text":"case format.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","title":"Swift API Design Guidelines","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"link"}}}