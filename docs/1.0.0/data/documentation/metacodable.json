{"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. The core of the framework is ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" macro which generates the implementation aided by data provided with using other macros.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Allows custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value declaration per variable, instead of requiring you to write all the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" passing single argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create composition of multiple ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" passing no arguments.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to provide default value in case of decoding failures with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"type":"text","text":" and using them with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"type":"text","text":". i.e. "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true,"type":"reference"},{"type":"text","text":" etc."}]}]},{"content":[{"inlineContent":[{"text":"Allows to ignore specific properties from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to use camel-case names for variables according to ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"reference"},{"text":", while enabling a type to work with different case style keys with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to ignore all initialized properties of a type from decoding\/encoding with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" etc."}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"Installation","text":"Installation"},{"type":"tabNavigator","tabs":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"https:\/\/swift.org\/package-manager\/","isActive":true,"type":"reference"},{"text":" is a tool for automating the distribution of Swift code and is integrated into the ","type":"text"},{"code":"swift","type":"codeVoice"},{"text":" compiler.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"code":"dependencies","type":"codeVoice"},{"type":"text","text":" value of your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then you can add the ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" module product as dependency to the ","type":"text"},{"type":"codeVoice","code":"target"},{"text":"s of your choosing, by adding it to the ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"text":" value of your ","type":"text"},{"type":"codeVoice","code":"target"},{"text":"s.","type":"text"}],"type":"paragraph"},{"code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift","type":"codeListing"}],"title":"Swift Package Manager"}]}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"abstract":[{"text":"Supercharge ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"metadata":{"modules":[{"name":"MetaCodable"}],"platforms":[{"introducedAt":"5.9","name":"Swift"}],"roleHeading":"Framework","title":"MetaCodable","externalID":"MetaCodable","symbolKind":"module","role":"collection"},"hierarchy":{"paths":[[]]},"variants":[{"paths":["\/documentation\/metacodable"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]},{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"]},{"title":"Protocols","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"]},{"title":"Enumerations","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","role":"symbol","type":"topic","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"Default(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","url":"\/documentation\/metacodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"role":"collection"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"url":"\/documentation\/metacodable\/codable()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"type":"text","text":"Generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" types by leveraging custom"},{"type":"text","text":" "},{"type":"text","text":"attributes provided on variable declarations."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"url":"\/documentation\/metacodable\/ignorecoding()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to ignored from decoding and encoding."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"title":"IgnoreCodingInitialized()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"type":"text","text":"Indicates by default initialized properties for the attached type will be"},{"type":"text","text":" "},{"type":"text","text":"ignored for decoding\/encoding."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","role":"symbol","type":"topic","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value for a property name.","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/codingkeynamestrategy","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"title":"CodingKeyNameStrategy"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","role":"symbol","type":"topic","abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"title":"IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","role":"symbol","type":"topic","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"title":"CodedIn(_:)"},"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"navigatorTitle":[{"kind":"identifier","text":"SequenceInitializable"}],"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/sequenceinitializable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable","title":"SequenceInitializable","abstract":[{"type":"text","text":"A sequence type that can be initialized from another sequence."}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitializable"}]},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" types by leveraging custom","type":"text"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/memberinit()","title":"MemberInit()"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"type":"topic","title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"url":"\/documentation\/metacodable\/helpercoder\/coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","title":"LossySequenceCoder","url":"\/documentation\/metacodable\/lossysequencecoder","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LossySequenceCoder","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"An "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}]},"https://swift.org/package-manager/":{"identifier":"https:\/\/swift.org\/package-manager\/","type":"link","titleInlineContent":[{"text":"Swift Package Manager","type":"text"}],"url":"https:\/\/swift.org\/package-manager\/","title":"Swift Package Manager"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","role":"symbol","type":"topic","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names will be of the provided","type":"text"},{"text":" ","type":"text"},{"text":"case format.","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"title":"CodingKeys(_:)"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"link","titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","title":"Swift API Design Guidelines"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","role":"symbol","type":"topic","abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"text":" ","type":"text"},{"text":"the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Indicates the field needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"type":"topic","title":"HelperCoder","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"url":"\/documentation\/metacodable\/helpercoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"role":"symbol"}}}