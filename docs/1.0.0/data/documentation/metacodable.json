{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"MetaCodable","externalID":"MetaCodable","modules":[{"name":"MetaCodable"}],"roleHeading":"Framework","role":"collection","symbolKind":"module","platforms":[{"name":"Swift","introducedAt":"5.9"}]},"kind":"symbol","abstract":[{"text":"Supercharge ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"topicSections":[{"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]},{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"]},{"title":"Protocols","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable"]},{"title":"Enumerations","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" framework exposes custom macros which can be used to generate dynamic "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations. The core of the framework is "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" macro which generates the implementation aided by data provided with using other macros."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value declaration per variable, instead of requiring you to write all the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" passing single argument.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" passing no arguments."}]}]},{"content":[{"inlineContent":[{"text":"Allows to provide default value in case of decoding failures with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" and using them with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":". i.e. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true},{"type":"text","text":" etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore specific properties from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true,"type":"reference"},{"type":"text","text":", while enabling a type to work with different case style keys with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to ignore all initialized properties of a type from decoding\/encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" etc."}],"type":"paragraph"}]}]},{"anchor":"Installation","type":"heading","level":2,"text":"Installation"},{"type":"tabNavigator","tabs":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"code":"swift","type":"codeVoice"},{"type":"text","text":" compiler."}]},{"type":"paragraph","inlineContent":[{"text":"Once you have your Swift package set up, adding ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" as a dependency is as easy as adding it to the ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" value of your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"]},{"type":"paragraph","inlineContent":[{"text":"Then you can add the ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" module product as dependency to the ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s of your choosing, by adding it to the ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" value of your ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"]}],"title":"Swift Package Manager"}]}]}],"hierarchy":{"paths":[[]]},"sections":[],"references":{"doc://MetaCodable/documentation/MetaCodable":{"url":"\/documentation\/metacodable","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"kind":"symbol","title":"MetaCodable","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"required":true,"type":"topic","role":"symbol","title":"Coded","url":"\/documentation\/metacodable\/helpercoder\/coded","kind":"symbol","abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"kind":"symbol","title":"CodedIn(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"kind":"symbol","type":"topic","title":"MemberInit()","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" types by leveraging custom","type":"text"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}],"url":"\/documentation\/metacodable\/memberinit()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/SequenceInitializable":{"abstract":[{"text":"A sequence type that can be initialized from another sequence.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/SequenceInitializable","title":"SequenceInitializable","kind":"symbol","url":"\/documentation\/metacodable\/sequenceinitializable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitializable"}],"navigatorTitle":[{"kind":"identifier","text":"SequenceInitializable"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","title":"IgnoreCoding()","role":"symbol"},"https://swift.org/package-manager/":{"type":"link","titleInlineContent":[{"text":"Swift Package Manager","type":"text"}],"title":"Swift Package Manager","url":"https:\/\/swift.org\/package-manager\/","identifier":"https:\/\/swift.org\/package-manager\/"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LossySequenceCoder","kind":"identifier"}],"navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}],"url":"\/documentation\/metacodable\/lossysequencecoder","type":"topic","role":"symbol","abstract":[{"text":"An ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":" that helps decoding\/encoding lossy sequence.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","title":"LossySequenceCoder"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"text":"Indicates the field needs to be decoded and encoded by","type":"text"},{"text":" ","type":"text"},{"text":"the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"kind":"symbol","title":"CodedBy(_:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","kind":"symbol","role":"symbol","type":"topic","title":"CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names will be of the provided","type":"text"},{"text":" ","type":"text"},{"text":"case format.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","url":"\/documentation\/metacodable\/ignoredecoding()","kind":"symbol","role":"symbol","type":"topic","title":"IgnoreDecoding()","abstract":[{"text":"Indicates the field needs to ignored from decoding.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}]},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"type":"link","titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"title":"Swift API Design Guidelines","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties for the attached type will be","type":"text"},{"text":" ","type":"text"},{"text":"ignored for decoding\/encoding.","type":"text"}],"kind":"symbol","title":"IgnoreCodingInitialized()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"role":"symbol","title":"HelperCoder","url":"\/documentation\/metacodable\/helpercoder","kind":"symbol","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field needs to ignored from encoding.","type":"text"}],"kind":"symbol","title":"IgnoreEncoding()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","url":"\/documentation\/metacodable\/codedat(_:)","kind":"symbol","role":"symbol","type":"topic","title":"CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" types by leveraging custom","type":"text"},{"text":" ","type":"text"},{"text":"attributes provided on variable declarations.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"url":"\/documentation\/metacodable\/codingkeynamestrategy","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value for a property name.","type":"text"}],"navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"kind":"symbol","title":"CodingKeyNameStrategy","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","url":"\/documentation\/metacodable\/default(_:)","kind":"symbol","role":"symbol","type":"topic","title":"Default(_:)","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}]}}}